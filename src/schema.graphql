type User {
    id: ID!
    firstName: String!
    lastName: String!
    email: String!
    # profileImageUrl: String!
    # isPublic: Boolean!
    # rank: Int!
    # totalMinutes: Int!
    # workouts: [Workout!]!
    # friends: [User!]!
    # friendRequests: [User!]!
    # blockedUsers: [User!]!
    # badges: [Badge!]!
}

type Badge {
    id: ID!
    name: String!
    description: String!
}

type Workout {
    # user: User!
    # category: WorkoutCategory!
    # imageUrl: String!
    duration: Int!
    description: String
    timestamp: String!
    # likes: [User!]!
}

enum WorkoutCategory {
    CARDIO
    STRENGTH
    FLEXIBILITY
    SPORTS
}
type Query {
    profile(id: ID!): User
    workout(id: ID!): Workout
    feed: [Workout!]!
    #TODO leaderboard: [User!]!
}

type Mutation {
    createUser(firstName: String!, lastName: String!, email: String!): User
    createWorkout(description: String, duration: Int!): Workout
    # updateUser(name: String, email: String, isPublic: Boolean): User
    # updateWorkout(id: ID!, imageUrl: String, description: String): Workout
    # deleteUser(id: ID!): User
    # deleteWorkout(id: ID!): Workout
    # sendFriendRequest(userId: ID!): User
    # acceptFriendRequest(userId: ID!): User
    # rejectFriendRequest(userId: ID!): User
    # removeFriend(userId: ID!): User
    # blockUser(blockedUserId: ID!): User
    # unblockUser(blockedUserId: ID!): User
    # likeWorkout(workoutId: ID!): Workout
    # unlikeWorkout(workoutId: ID!): Workout
    # ---admin only mutations---
    # banUser(userId: ID!): User
    # unbanUser(userId: ID!): User
}

type Subscription {
    feedUpdated: [Workout!]!
    friendRequestReceived: User
    friendRequestAccepted: User
    workoutLiked: Workout
}