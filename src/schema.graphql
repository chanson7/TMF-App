type Announcement {
    id: ID!
    user: User!
    text: String!
    timestamp: String!
}

type User {
    id: ID!
    firstName: String!
    lastName: String!
    isPrivate: Boolean!
    workouts: [Workout!]!
    badges: [Badge!]!
    # profileImageUrl: String!
    # blockedUsers: [User!]!
}

type Badge {
    id: ID!
    challenge: Challenge!
    user: User!
    timestamp: String!
    description: String!
}

type Challenge {
    id: ID!
    startDate: String!
    endDate: String!
    participants: [User!]!
    badgesEarned: Int
}

type Workout {
    id: ID!
    user: User!
    category: WorkoutCategory!
    timestamp: String!
    challengeId: ID
    durationMinutes: Int!
    description: String
    likes: [User!]!
    comments: [Comment!]!
}

type Comment {
    id: ID!
    user: User!
    workout: Workout!
    text: String!
    timestamp: String!
}

enum WorkoutCategory {
    CARDIO
    STRENGTH
    FLEXIBILITY
    SPORTS
}

type Query {
    user(id: ID!): User
    workout(challengeId: ID!, workoutId: ID!): Workout
    leaderboard(challengeId: ID!): [User!]!
}

type Mutation {
    createUser(firstName: String!, lastName: String!): User
    createWorkout(description: String, duration: Int!): Workout
    createComment(workoutId: ID!, text: String!): Comment
    deleteComment(commentId: ID!): Comment
    likeWorkout(workoutId: ID!): Workout
    unlikeWorkout(workoutId: ID!): Workout
    # admin mutations
    adminCreateChallenge: Challenge
    adminBlockUser(userId: ID!): User
    adminUnblockUser(userId: ID!): User
}

type Subscription {
    feedUpdated: [Workout!]!
    # workoutLiked: Workout
}