type User {
    id: ID!
    name: String!
    profileImageUrl: String!
    email: String!
    isPublic: Boolean!
    rank: Int!
    totalMinutes: Int!
    workouts: [Workout!]!
    friends: [User!]!
    friendRequests: [User!]!
    blockedUsers: [User!]!
    badges: [Badge!]!
    isBanned: Boolean! #TODO is this necessary?.. Can Cognito handle this?
}

type Badge {
    id: ID!
    name: String!
    iconUrl: String!
    description: String!
}

type Workout {
    # user: User!
    # category: WorkoutCategory!
    # imageUrl: String!
    duration: Int!
    description: String!
    timestamp: String!
    # likes: [User!]!
}

enum WorkoutCategory {
    CARDIO
    STRENGTH
    FLEXIBILITY
    SPORTS
}

type Query {
    profile(id: ID!): User
    workout(id: ID!): Workout
    feed(userId: ID!): [Workout!]!
    #TODO leaderboard: [User!]!
}

type Mutation {
    createUser(name: String!, email: String!): User
    createWorkout(description: String!, duration: Int!): Workout
    updateUser(name: String, email: String, isPublic: Boolean): User
    updateWorkout(id: ID!, imageUrl: String, description: String): Workout
    deleteUser(id: ID!): User
    deleteWorkout(id: ID!): Workout
    sendFriendRequest(userId: ID!): User
    acceptFriendRequest(userId: ID!): User
    rejectFriendRequest(userId: ID!): User
    removeFriend(userId: ID!): User
    blockUser(blockedUserId: ID!): User
    unblockUser(blockedUserId: ID!): User
    likeWorkout(workoutId: ID!): Workout
    unlikeWorkout(workoutId: ID!): Workout
    #admin only
    banUser(userId: ID!): User
    unbanUser(userId: ID!): User
}

type Subscription {
    feedUpdated: [Workout!]!
    friendRequestReceived: User
    friendRequestAccepted: User
    workoutLiked: Workout
}